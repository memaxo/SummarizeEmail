version: '3.8'

services:
  # The FastAPI application service
  summarizer-api:
    # Build the Docker image from the Dockerfile in the current directory
    build: .
    # Forward the exposed port 8000 from the container to port 8000 on the host machine
    ports:
      - "8000:8000"
    # Load environment variables from a .env file in the same directory
    # The user must create this file from the .env.example template
    env_file:
      - .env
    # Override specific environment variables for Docker networking
    environment:
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_SERVER=db
      - DB_HOST=db
    # This service depends on both 'redis' and 'db' services.
    # Docker Compose will start them before starting 'summarizer-api'
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    # Add a healthcheck to ensure the API is running before it's considered "up"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    container_name: email_summarizer_api
    # Add restart policy
    restart: unless-stopped
    # Add volume for logs
    volumes:
      - ./logs:/app/logs

  # The Celery worker service
  celery-worker:
    build: .
    command: celery -A app.tasks.celery_app worker -l info
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - POSTGRES_SERVER=db
      - DB_HOST=db
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped
    container_name: email_summarizer_celery_worker
    volumes:
      - ./logs:/app/logs
      - ./:/app  # Mount current directory to allow for code changes without rebuilding

  # The Celery beat service (for scheduled tasks)
  celery-beat:
    build: .
    command: celery -A app.tasks.celery_app beat -l info
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - POSTGRES_SERVER=db
      - DB_HOST=db
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped
    container_name: email_summarizer_celery_beat

  # The Flower service for monitoring Celery
  flower:
    image: mher/flower
    command: ["flower", "--broker=redis://redis:6379/0", "--port=5555"]
    ports:
      - "5556:5555" # Expose Flower UI on host port 5556
    depends_on:
      - redis
    container_name: email_summarizer_flower
    restart: unless-stopped

  # The Redis caching service
  redis:
    # Use a standard Redis image from Docker Hub
    image: "redis:7-alpine"
    # Expose Redis port to the host machine for local development
    ports:
      - "6379:6379"
    # Add a healthcheck to ensure Redis is ready before other services start
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: email_summarizer_redis
    # Add restart policy
    restart: unless-stopped
    # Add volume for Redis persistence
    volumes:
      - redis_data:/data
    # Enable Redis persistence
    command: redis-server --appendonly yes

  # The Locust load testing service
  locust:
    image: locustio/locust
    ports:
      - "8089:8089" # Locust web UI
    volumes:
      - ./tests/load:/mnt/locust
    command: -f /mnt/locust/locustfile.py --host http://summarizer-api:8000
    depends_on:
      - summarizer-api
    container_name: email_summarizer_locust
    # Don't auto-restart load testing service
    restart: "no"

  # The PostgreSQL database service with pgvector
  db:
    image: pgvector/pgvector:pg16
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=email_summarizer
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d email_summarizer"]
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: email_summarizer_db
    # Add restart policy
    restart: unless-stopped

# Networks for services to communicate
# By default, docker-compose sets up a single network for your app
networks:
  default:
    driver: bridge

volumes:
  postgres_data:
  redis_data: 